类加载运行
这里以一个写了main方法的类说明 @TestJDKClassLoader为例
1.TestJDKClassLoader.java --> 编译打包 -> xx.jar（包含TestJDKClassLoader.class）-->
加载 >> 验证 >> 准备 >> 解析 >> 初始化 >> 使用 >> 卸载

注意：我们说的类的加载是如下前5步，加载文件->.....->初始化

加载:在硬盘上查找并通过IO读入字节码文件，使用到类时才会加载（懒加载），例如调用类的main()方法，new对象等等，在加载阶段会在内存中生成一个代表这个类的
java.lang.Class对象，作为方法区这个类的各种数据的访问入口
验证：校验字节码文件的正确性
准备：给类的静态变量分配内存，并赋予默认值 int是0，boolean类型是false等
解析：将符号引用替换为直接引用，该阶段会把一些静态方法(符号引用，比如main()方法)替换为指向数据所存内存的指针或句柄等(直接引用)，这是所谓的静态链接过
程(类加载期间完成)，动态链接是在程序运行期间完成的将符号引用替换为直接引用，下
初始化：对类的静态变量初始化为指定的值，执行静态代码块(这里跟准备阶段赋值区分，准备阶段赋默认值，这里是实际值)，比如 TestJDKClassLoader的字段a准备
阶段0，初始化时5。

2.类加载 大致过程

TestJDKClassLoader.java 编译
TestJDKClassLoader.class
windows系统 java.exe程序调用jvm.dll文件启动java虚拟机
JVM创建引导类加载器bootstrapClassLoader(这是c++创建的实例)
jvm通过JNI技术调用java代码创建jvm启动器实例(launcher) 该类是由bootstrapClassLoader加载 用来创建其他类加载器
launcher.getLauncher() 饿汉式单例
launcher获取运行TestJDKClassLoader类的类加载器 ->AppClassLoader

AppClassLoader.loadClass("com.zhiwen.jvm.TestJDKClassLoader") 这里涉及到双亲委派过程
加载完执行main方法

双亲委派:
ClassLoader.loadClass() {

       //查询当前加载器是否已经加载 app->ext->boot(为null)
       Class<?> c = findLoadedClass(name);
       if (parent != null) {
              c = parent.loadClass(name, false);
       } else {
           //parant==null 说明是boot
           c = findBootstrapClassOrNull(name);
        }

        //
        if(c==null){
            //从ext->app 看当前类加载器是否可以加载到name资源
            c = URLClassLoader.findClass(name){
                defineClass();
            }
        }



}



